{"version":3,"sources":["processor.js"],"names":["Processor","stepName","compiler","fileTypes","fileExtensions","additionalLineCount","inputFile","fileOptions","getFileOptions","hasOwnProperty","isImport","hasUnderscore","getPathInPackage","file","basename","fileExtension","indexOf","type","resultSoFar","_process","numberOfAdditionalLines","adjustedLineNumber","line","error","importPath","column","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,S;AACnB,qBAAYC,QAAZ,QAA2FC,QAA3F,EAAqG;AAAA,8BAA7EC,SAA6E;AAAA,QAA7EA,SAA6E,kCAAjE,CAAC,MAAD,EAAS,MAAT,CAAiE;AAAA,mCAA/CC,cAA+C;AAAA,QAA/CA,cAA+C,uCAA9B,CAAC,MAAD,EAAS,MAAT,CAA8B;AAAA;;AACnG,SAAKH,QAAL,GAAgBA,QAAhB;AACA;AACA,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,mBAAL,GAA2B,CAA3B;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACD;;;;2BAEMI,S,EAAW;AAChB,UAAMC,cAAcD,UAAUE,cAAV,EAApB;AACA,UAAID,YAAYE,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AAC1C,eAAO,CAACF,YAAYG,QAApB;AACD;;AAED,aAAO,CAACC,cAAcL,UAAUM,gBAAV,EAAd,CAAR;;AAEA,eAASD,aAAT,CAAuBE,IAAvB,EAA6B;AAC3B,eAAO,eAAKC,QAAL,CAAcD,IAAd,EAAoB,CAApB,MAA2B,GAAlC;AACD;AACF;;;yCAEoBE,a,EAAe;AAClC,aAAO,KAAKX,cAAL,CAAoBY,OAApB,CAA4BD,aAA5B,MAA+C,CAAC,CAAvD;AACD;;;gCAEWE,I,EAAM;AAChB,aAAO,KAAKd,SAAL,CAAea,OAAf,CAAuBC,IAAvB,MAAiC,CAAC,CAAzC;AACD;;;;8FAEaJ,I,EAAMK,W;;;;;;;;uBAEH,KAAKC,QAAL,CAAcN,IAAd,EAAoBK,WAApB,C;;;;;;;;AAEPE,uC,GAA0B,KAAKf,mBAAL,GAC5B,KAAKA,mBAAL,GAA2B,CADC,GAE5B,C;AACEgB,kC,GAAqB,YAAIC,IAAJ,GAAWF,uB;;AACtC,yCAAOG,KAAP;AACA,yCAAOA,KAAP,uBAAiC,KAAKtB,QAAtC;AACA,yCAAOsB,KAAP,wBAAkCV,KAAKW,UAAvC,gBAA4DH,kBAA5D,kBAA2F,YAAII,MAA/F;AACA,yCAAOF,KAAP;;;;;;;;;;;;;;;;;;;+BAKO;AACT,YAAM,IAAIG,KAAJ,CAAU,4DAAV,CAAN;AACD;;;;;kBAjDkB1B,S;AAmDpB","file":"processor.js","sourcesContent":["import path from 'path';\r\nimport logger from 'hookable-logger';\r\n\r\nexport default class Processor {\r\n  constructor(stepName, { fileTypes = ['scss', 'sass'], fileExtensions = ['scss', 'sass'] }, compiler) {\r\n    this.stepName = stepName;\r\n    // this.filesByName = null;\r\n    this.fileExtensions = fileExtensions;\r\n    this.fileTypes = fileTypes;\r\n    this.additionalLineCount = 0;\r\n    this.compiler = compiler;\r\n  }\r\n\r\n  isRoot(inputFile) {\r\n    const fileOptions = inputFile.getFileOptions();\r\n    if (fileOptions.hasOwnProperty('isImport')) {\r\n      return !fileOptions.isImport;\r\n    }\r\n\r\n    return !hasUnderscore(inputFile.getPathInPackage());\r\n\r\n    function hasUnderscore(file) {\r\n      return path.basename(file)[0] === '_';\r\n    }\r\n  }\r\n\r\n  handlesFileExtension(fileExtension) {\r\n    return this.fileExtensions.indexOf(fileExtension) !== -1;\r\n  }\r\n\r\n  handlesType(type) {\r\n    return this.fileTypes.indexOf(type) !== -1;\r\n  }\r\n\r\n  async process(file, resultSoFar) {\r\n    try {\r\n      return await this._process(file, resultSoFar);\r\n    } catch (err) {\r\n      const numberOfAdditionalLines = this.additionalLineCount\r\n        ? this.additionalLineCount + 1\r\n        : 0;\r\n      const adjustedLineNumber = err.line - numberOfAdditionalLines;\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      logger.error(`Processing Step: ${this.stepName}`);\r\n      logger.error(`Unable to process ${file.importPath}\\nLine: ${adjustedLineNumber}, Column: ${err.column}\\n${err}`);\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  _process() {\r\n    throw new Error('the _process method must be implemented by the child class')\r\n  }\r\n\r\n};\r\n"]}