{"version":3,"sources":["processor.js"],"names":["Processor","stepName","fileTypes","fileExtensions","filesByName","additionalLineCount","inputFile","fileOptions","getFileOptions","hasOwnProperty","isImport","hasUnderscore","getPathInPackage","file","basename","fileExtension","indexOf","type","_process","numberOfAdditionalLines","adjustedLineNumber","line","error","importPath","column","Error","rootFile","prepInputFile","await","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqBA,S;AACnB,qBAAYC,QAAZ,QAAuF;AAAA,8BAAhEC,SAAgE;AAAA,QAAhEA,SAAgE,kCAApD,CAAC,MAAD,EAAQ,MAAR,CAAoD;AAAA,mCAAnCC,cAAmC;AAAA,QAAnCA,cAAmC,uCAAlB,CAAC,MAAD,EAAQ,MAAR,CAAkB;AAAA;;AACrF,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKG,WAAL,GAAmB,IAAnB;AACA,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKG,mBAAL,GAA2B,CAA3B;AACD;;;;2BAEMC,S,EAAW;AAChB,UAAMC,cAAcD,UAAUE,cAAV,EAApB;AACA,UAAID,YAAYE,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AAC1C,eAAO,CAACF,YAAYG,QAApB;AACD;;AAED,aAAO,CAACC,cAAcL,UAAUM,gBAAV,EAAd,CAAR;;AAEA,eAASD,aAAT,CAAuBE,IAAvB,EAA6B;AAC3B,eAAO,eAAKC,QAAL,CAAcD,IAAd,EAAoB,CAApB,MAA2B,GAAlC;AACD;AACF;;;yCAEoBE,a,EAAe;AAClC,aAAO,KAAKZ,cAAL,CAAoBa,OAApB,CAA4BD,aAA5B,MAA+C,CAAC,CAAvD;AACD;;;gCAEWE,I,EAAM;AAChB,aAAO,KAAKf,SAAL,CAAec,OAAf,CAAuBC,IAAvB,MAAiC,CAAC,CAAzC;AACD;;;;8FAEaJ,I,EAAMT,W;;;;;;AAClB,qBAAKA,WAAL,GAAmBA,WAAnB;;;uBAEQ,KAAKc,QAAL,CAAcL,IAAd,C;;;;;;;;;AAEAM,uC,GAA0B,KAAKd,mBAAL,GAC5B,KAAKA,mBAAL,GAA2B,CADC,GAE5B,C;AACEe,kC,GAAqB,YAAIC,IAAJ,GAAWF,uB;;AACtC,yCAAOG,KAAP;AACA,yCAAOA,KAAP,uBAAiC,KAAKrB,QAAtC;AACA,yCAAOqB,KAAP,wBAAkCT,KAAKU,UAAvC,gBAA4DH,kBAA5D,kBAA2F,YAAII,MAA/F;AACA,yCAAOF,KAAP;;;;;;;;;;;;;;;;;;;6BAKKT,I,EAAM;AACb,YAAM,IAAIY,KAAJ,CAAU,4DAAV,CAAN;AACD;;;wCAEmBF,U,EAAYG,Q,EAAU;AACxC,UAAMb,OAAO,kDAAiBU,UAAjB,EAA6BG,QAA7B,CAAb;AACAb,WAAKc,aAAL,GAAqBC,KAArB;AACA,WAAKxB,WAAL,CAAiByB,GAAjB,CAAqBN,UAArB,EAAiCV,IAAjC;AACD;;;;;kBAvDkBb,S;AAyDpB","file":"processor.js","sourcesContent":["import path from 'path';\r\nimport IncludedFile from 'meteor-build-plugin-helper-included-file';\r\nimport logger from 'hookable-logger';\r\n\r\nexport default class Processor {\r\n  constructor(stepName, {fileTypes = ['scss','sass'], fileExtensions = ['scss','sass']}) {\r\n    this.stepName = stepName;\r\n    this.filesByName = null;\r\n    this.fileExtensions = fileExtensions;\r\n    this.fileTypes = fileTypes;\r\n    this.additionalLineCount = 0;\r\n  }\r\n\r\n  isRoot(inputFile) {\r\n    const fileOptions = inputFile.getFileOptions();\r\n    if (fileOptions.hasOwnProperty('isImport')) {\r\n      return !fileOptions.isImport;\r\n    }\r\n\r\n    return !hasUnderscore(inputFile.getPathInPackage());\r\n\r\n    function hasUnderscore(file) {\r\n      return path.basename(file)[0] === '_';\r\n    }\r\n  }\r\n\r\n  handlesFileExtension(fileExtension) {\r\n    return this.fileExtensions.indexOf(fileExtension) !== -1;\r\n  }\r\n\r\n  handlesType(type) {\r\n    return this.fileTypes.indexOf(type) !== -1;\r\n  }\r\n\r\n  async process(file, filesByName) {\r\n    this.filesByName = filesByName;\r\n    try {\r\n      await this._process(file);\r\n    } catch (err) {\r\n      const numberOfAdditionalLines = this.additionalLineCount\r\n        ? this.additionalLineCount + 1\r\n        : 0;\r\n      const adjustedLineNumber = err.line - numberOfAdditionalLines;\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      logger.error(`Processing Step: ${this.stepName}`);\r\n      logger.error(`Unable to process ${file.importPath}\\nLine: ${adjustedLineNumber}, Column: ${err.column}\\n${err}`);\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  _process(file) {\r\n    throw new Error('the _process method must be implemented by the child class')\r\n  }\r\n\r\n  _createIncludedFile(importPath, rootFile) {\r\n    const file = new IncludedFile(importPath, rootFile);\r\n    file.prepInputFile().await();\r\n    this.filesByName.set(importPath, file);\r\n  }\r\n\r\n};\r\n"]}